<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your
computer and the GNU-GCC compiler. Both of them will be available if you
install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x00">
  <!--${Shared::BlinkySignals}-->
  <attribute name="BlinkySignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    TIMEOUT_SIG = Q_USER_SIG,
};</code>
  </attribute>
  <!--${Shared::AO_Blinky}-->
  <attribute name="AO_Blinky" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Blinky_inst.super;</code>
  </attribute>
  <!--${Shared::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky * const me = &amp;Blinky_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::TimeBomb}-->
  <class name="TimeBomb" superclass="qpc::QActive">
   <!--${AOs::TimeBomb::te}-->
   <attribute name="te" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::TimeBomb::inst}-->
   <attribute name="inst" type="TimeBomb" visibility="0x00" properties="0x01"/>
   <!--${AOs::TimeBomb::blink_ctr}-->
   <attribute name="blink_ctr" type="int32_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::TimeBomb::ctor}-->
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;TimeBomb_initial);
QTimeEvt_ctorX(&amp;me-&gt;te, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
   </operation>
   <!--${AOs::TimeBomb::SM}-->
   <statechart properties="0x03">
    <documentation>Blinky state machine</documentation>
    <!--${AOs::TimeBomb::SM::initial}-->
    <initial target="../1/2">
     <initial_glyph conn="10,4,5,1,33,20,-6">
      <action box="0,-2,17,3"/>
     </initial_glyph>
    </initial>
    <!--${AOs::TimeBomb::SM::armed}-->
    <state name="armed">
     <exit brief="all-LEDs=off;">BSP_redLedOff();
BSP_greenLedOff();
BSP_blueLedOff();</exit>
     <!--${AOs::TimeBomb::SM::armed::initial}-->
     <initial target="../2">
      <initial_glyph conn="48,16,4,1,12,-11">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::TimeBomb::SM::armed::BUTTON2_PRESSED}-->
     <tran trig="BUTTON2_PRESSED" target="../../2">
      <tran_glyph conn="54,27,1,2,20,-9">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::TimeBomb::SM::armed::wait4Button}-->
     <state name="wait4Button">
      <entry brief="Green-LED on;">BSP_greenLedOn();</entry>
      <exit brief="Green-LED off;">BSP_greenLedOff();</exit>
      <!--${AOs::TimeBomb::SM::armed::wait4Button::BUTTON_PRESSED}-->
      <tran trig="BUTTON_PRESSED" target="../../3">
       <action brief="blink_ctr = 5">me-&gt;blink_ctr = 5;</action>
       <tran_glyph conn="13,31,3,1,30,10,-6">
        <action box="0,-2,24,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="13,20,24,14">
       <entry box="0,3,16,3"/>
       <exit box="0,6,16,3"/>
      </state_glyph>
     </state>
     <!--${AOs::TimeBomb::SM::armed::blink}-->
     <state name="blink">
      <entry brief="Red-LED on; arm-TE for 1/2 sec;">BSP_redLedOn();
QTimeEvt_armX(&amp;me-&gt;te, (blink_time), 0U);</entry>
      <exit brief="Red-LED off;">BSP_redLedOff();</exit>
      <!--${AOs::TimeBomb::SM::armed::blink::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../4">
       <tran_glyph conn="13,48,3,1,27,6,-3">
        <action box="0,-2,22,7"/>
       </tran_glyph>
      </tran>
      <state_glyph node="13,36,24,14">
       <entry box="0,3,17,4"/>
       <exit box="0,7,15,3"/>
      </state_glyph>
     </state>
     <!--${AOs::TimeBomb::SM::armed::pause}-->
     <state name="pause">
      <entry brief="arm-TE for 1/2 sec;">QTimeEvt_armX(&amp;me-&gt;te, (blink_time), 0U);</entry>
      <!--${AOs::TimeBomb::SM::armed::pause::TIMEOUT}-->
      <tran trig="TIMEOUT">
       <action brief="--blink_ctr;">--me-&gt;blink_ctr;</action>
       <!--${AOs::TimeBomb::SM::armed::pause::TIMEOUT::[blink_ctr>0]}-->
       <choice target="../../../3">
        <guard brief="blink_ctr&gt;0">--me-&gt;blink_ctr &gt; 0</guard>
        <choice_glyph conn="43,60,4,1,-16,-6">
         <action box="0,-11,11,8"/>
        </choice_glyph>
       </choice>
       <!--${AOs::TimeBomb::SM::armed::pause::TIMEOUT::[else]}-->
       <choice target="../../../5">
        <guard brief="else"/>
        <choice_glyph conn="43,60,4,1,8,-6">
         <action box="0,4,11,6"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="13,60,3,-1,30">
        <action box="0,-2,22,7"/>
       </tran_glyph>
      </tran>
      <state_glyph node="13,51,24,11">
       <entry box="0,3,16,2"/>
      </state_glyph>
     </state>
     <!--${AOs::TimeBomb::SM::armed::boom}-->
     <state name="boom">
      <entry brief="All-LEDs ON">BSP_redLedOn();
BSP_greenLedOn();
BSP_blueLedOn();</entry>
      <state_glyph node="13,65,24,8">
       <entry box="0,3,18,2"/>
      </state_glyph>
     </state>
     <state_glyph node="11,7,43,68">
      <exit box="0,3,19,3"/>
     </state_glyph>
    </state>
    <!--${AOs::TimeBomb::SM::defused}-->
    <state name="defused">
     <entry brief="blue-LED=on;">BSP_blueLedOn();</entry>
     <exit brief="blue-LED=off;">BSP_blueLedOff();</exit>
     <!--${AOs::TimeBomb::SM::defused::BUTTON2_PRESSED}-->
     <tran trig="BUTTON2_PRESSED" target="../../1">
      <tran_glyph conn="79,18,2,1,22,-25">
       <action box="-23,20,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="64,7,21,11">
      <entry box="0,3,17,2"/>
      <exit box="0,5,17,2"/>
     </state_glyph>
    </state>
    <state_diagram size="118,83"/>
   </statechart>
  </class>
  <!--${AOs::../src}-->
  <directory name="../src">
   <!--${AOs::../src::main.c}-->
   <file name="main.c">
    <text>/* TimeBomb/Button with QPC framework */
#include &quot;qpc.h&quot;
#include &quot;bsp.h&quot;

// Q_DEFINE_THIS_MODULE(&quot;main&quot;) /* this module name for Q_ASSERT() */

enum { blink_time = BSP_TICKS_PER_SEC / 4U };

/* The TimeBomb AO =======================================================*/
$declare${AOs::TimeBomb}

$define${AOs::TimeBomb}

static QEvt const *timeBomb_queue[10];
static TimeBomb timeBomb;
QActive *AO_TimeBomb = &amp;timeBomb.super;


/* the main function =========================================================*/
int main() {
    BSP_init(); /* initialize the BSP */
    QF_init();   /* initialize QP/C */

    /* create AO and start it */
    TimeBomb_ctor(&amp;timeBomb);
    QACTIVE_START(AO_TimeBomb,
        2U,
        timeBomb_queue,
        sizeof(timeBomb_queue)/ sizeof(timeBomb_queue[0]),
        (void*)0, 0U,
        (void*)0
        );

    QF_run(); /* run QP/C */
    return 0; /* NOTE: the scheduler does NOT return */
}
</text>
   </file>
  </directory>
 </package>
</model>
