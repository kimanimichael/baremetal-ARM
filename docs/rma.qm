<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your
computer and the GNU-GCC compiler. Both of them will be available if you
install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x00">
  <!--${Shared::BlinkySignals}-->
  <attribute name="BlinkySignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    TIMEOUT_SIG = Q_USER_SIG,
};</code>
  </attribute>
  <!--${Shared::AO_Blinky}-->
  <attribute name="AO_Blinky" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Blinky_inst.super;</code>
  </attribute>
  <!--${Shared::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky * const me = &amp;Blinky_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Blinky1}-->
  <class name="Blinky1" superclass="qpc::QActive">
   <!--${AOs::Blinky1::te}-->
   <attribute name="te" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Blinky1::ctor}-->
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Blinky1_initial);
QTimeEvt_ctorX(&amp;me-&gt;te, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
   </operation>
   <!--${AOs::Blinky1::SM}-->
   <statechart properties="0x03">
    <documentation>Blinky state machine</documentation>
    <!--${AOs::Blinky1::SM::initial}-->
    <initial target="../1">
     <action>QTimeEvt_armX(&amp;me-&gt;te, 1U, 1U);</action>
     <initial_glyph conn="2,3,5,1,57,14,-4">
      <action box="1,0,32,5"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Blinky1::SM::active}-->
    <state name="active">
     <!--${AOs::Blinky1::SM::active::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>for (uint32_t volatile i = 1500U;i != 0U;i--) {
            BSP_greenLedOn();
            BSP_greenLedOff();
        }</action>
      <tran_glyph conn="8,19,3,-1,43">
       <action box="1,0,37,10"/>
      </tran_glyph>
     </tran>
     <state_glyph node="8,12,47,20"/>
    </state>
    <state_diagram size="67,61"/>
   </statechart>
  </class>
  <!--${AOs::Blinky2}-->
  <class name="Blinky2" superclass="qpc::QActive">
   <!--${AOs::Blinky2::te}-->
   <attribute name="te" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Blinky2::ctor}-->
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Blinky2_initial);
QTimeEvt_ctorX(&amp;me-&gt;te, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
   </operation>
   <!--${AOs::Blinky2::SM}-->
   <statechart properties="0x03">
    <documentation>Blinky state machine</documentation>
    <!--${AOs::Blinky2::SM::initial}-->
    <initial target="../1">
     <initial_glyph conn="2,3,5,1,57,14,-4">
      <action box="1,0,32,5"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Blinky2::SM::active}-->
    <state name="active">
     <!--${AOs::Blinky2::SM::active::BUTTON_PRESSED}-->
     <tran trig="BUTTON_PRESSED">
      <action>for (uint32_t volatile i = 5 * 1500U;i != 0U;i--) {
            BSP_blueLedOn();
            BSP_blueLedOff();
        }</action>
      <tran_glyph conn="8,19,3,-1,43">
       <action box="1,0,37,10"/>
      </tran_glyph>
     </tran>
     <state_glyph node="8,12,47,20"/>
    </state>
    <state_diagram size="67,61"/>
   </statechart>
  </class>
 </package>
 <!--${../src}-->
 <directory name="../src">
  <!--${../src::main.c}-->
  <file name="main.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;bsp.h&quot;


$declare${AOs::Blinky1}
$declare${AOs::Blinky2}

$define${AOs::Blinky1}
$define${AOs::Blinky2}

static QEvt const *blinky1_queue[10];
static Blinky1 blinky1;

static QEvt const *blinky2_queue[10];
static Blinky2 blinky2;

QActive* const AO_Blinky1 = &amp;blinky1.super;
QActive* const AO_Blinky2 = &amp;blinky2.super;

/* the main function =========================================================*/
int main() {
    BSP_init(); /* initialize the BSP */
    QF_init();   /* initialize QP/C */

    Blinky1_ctor(&amp;blinky1);
    QACTIVE_START(&amp;blinky1,
        5U,
        blinky1_queue,
        sizeof(blinky1_queue)/ sizeof(blinky1_queue[0]),
        (void*)0, 0U,
        (void*)0
        );

    Blinky2_ctor(&amp;blinky2);
    QACTIVE_START(&amp;blinky2,
        2U,
        blinky2_queue,
        sizeof(blinky2_queue)/ sizeof(blinky2_queue[0]),
        (void*)0, 0U,
        (void*)0
        );

    QF_run(); /* run QP/C */
    return 0; /* NOTE: the scheduler does NOT return */
}
</text>
  </file>
 </directory>
</model>
